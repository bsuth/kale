-- -----------------------------------------------------------------------------
-- Parse
-- -----------------------------------------------------------------------------

describe('Number.parse', function()
  spec('rule', function()
    assert.are.equal('Number', unit.Number('0').rule)
  end)

  spec('integer', function()
    assert.are.equal('9', unit.Number('9').value)
    assert.are.equal('43', unit.Number('43').value)
  end)

  spec('hex', function()
    assert.are.equal('0x4', unit.Number('0x4').value)
    assert.are.equal('0xd', unit.Number('0xd').value)
    assert.are.equal('0Xf', unit.Number('0Xf').value)
    assert.are.equal('0xa8F', unit.Number('0xa8F').value)
    assert.are.equal('0xfp2', unit.Number('0xfp2').value)
    assert.are.equal('0xfP2', unit.Number('0xfP2').value)
    assert.are.equal('0xfp+2', unit.Number('0xfp+2').value)
    assert.are.equal('0xfp-2', unit.Number('0xfp-2').value)
    assert.has_error(function()
      unit.Number('x3')
    end)
    assert.has_error(function()
      unit.Number('0x')
    end)
    assert.has_error(function()
      unit.Number('0xg')
    end)
    assert.has_error(function()
      unit.Number('0xfp+')
    end)
    assert.has_error(function()
      unit.Number('0xfp-')
    end)
    assert.has_error(function()
      unit.Number('0xfpa')
    end)
  end)

  spec('floats', function()
    assert.are.equal('.34', unit.Number('.34').value)
    assert.are.equal('0.3', unit.Number('0.3').value)
    assert.are.equal('10.33', unit.Number('10.33').value)
    assert.has_error(function()
      unit.Number('4.')
    end)
  end)

  spec('exponents', function()
    assert.are.equal('9e2', unit.Number('9e2').value)
    assert.are.equal('9.2E21', unit.Number('9.2E21').value)
    assert.are.equal('9e+2', unit.Number('9e+2').value)
    assert.are.equal('.8e-2', unit.Number('.8e-2').value)
    assert.has_error(function()
      unit.Number('9e')
    end)
    assert.has_error(function()
      unit.Number('9e+')
    end)
    assert.has_error(function()
      unit.Number('9e-')
    end)
    assert.has_error(function()
      unit.Number('e2')
    end)
  end)
end)

-- -----------------------------------------------------------------------------
-- Compile
-- -----------------------------------------------------------------------------

describe('Number.compile', function()
  -- TODO
end)
