-- -----------------------------------------------------------------------------
-- Misc
-- -----------------------------------------------------------------------------

module VERSION = '0.6.0-1'

-- Get the current platform path separator. Note that while this is undocumented
-- in the Lua 5.1 manual, it is indeed supported in 5.1+.
--
-- https://www.lua.org/manual/5.3/manual.html#pdf-package.config
module PATH_SEPARATOR = package.config:sub(1, 1)

-- A footer comment we inject into compiled code in order to track which files
-- have been generated by the cli (and thus allows us to also clean them later).
module COMPILED_FOOTER_COMMENT = '-- __ERDE_COMPILED__'

-- -----------------------------------------------------------------------------
-- Lua Target
-- -----------------------------------------------------------------------------

module VALID_LUA_TARGETS = {
	'jit',
	'5.1',
	'5.1+',
	'5.2',
	'5.2+',
	'5.3',
	'5.3+',
	'5.4',
	'5.4+',
}

for i, target in ipairs(VALID_LUA_TARGETS) {
	VALID_LUA_TARGETS[target] = true
}

-- -----------------------------------------------------------------------------
-- Keywords / Terminals
-- -----------------------------------------------------------------------------

module KEYWORDS = {
	'local',
	'global',
	'module',
	'if',
	'elseif',
	'else',
	'for',
	'in',
	'while',
	'repeat',
	'until',
	'do',
	'function',
	'false',
	'true',
	'nil',
	'return',
	'break',
	'continue',
}

-- Words that are keywords in Lua but NOT in Erde.
module LUA_KEYWORDS = {
	['not'] = true,
	['and'] = true,
	['or'] = true,
	['end'] = true,
	['then'] = true,
}

module TERMINALS = {
	'true',
	'false',
	'nil',
	'...',
}

-- -----------------------------------------------------------------------------
-- Operations
-- -----------------------------------------------------------------------------

module LEFT_ASSOCIATIVE = -1
module RIGHT_ASSOCIATIVE = 1

module UNOPS = {
	['-'] = { prec = 13 },
	['#'] = { prec = 13 },
	['!'] = { prec = 13 },
	['~'] = { prec = 13 },
}

for token, op in pairs(UNOPS) {
	op.token = token
}

module BITOPS = {
	['|'] = { prec = 6, assoc = LEFT_ASSOCIATIVE },
	['~'] = { prec = 7, assoc = LEFT_ASSOCIATIVE },
	['&'] = { prec = 8, assoc = LEFT_ASSOCIATIVE },
	['<<'] = { prec = 9, assoc = LEFT_ASSOCIATIVE },
	['>>'] = { prec = 9, assoc = LEFT_ASSOCIATIVE },
}

module BITLIB_METHODS = {
	['|'] = 'bor',
	['~'] = 'bxor',
	['&'] = 'band',
	['<<'] = 'lshift',
	['>>'] = 'rshift',
}

module BINOPS = {
	['||'] = { prec = 3, assoc = LEFT_ASSOCIATIVE },
	['&&'] = { prec = 4, assoc = LEFT_ASSOCIATIVE },
	['=='] = { prec = 5, assoc = LEFT_ASSOCIATIVE },
	['!='] = { prec = 5, assoc = LEFT_ASSOCIATIVE },
	['<='] = { prec = 5, assoc = LEFT_ASSOCIATIVE },
	['>='] = { prec = 5, assoc = LEFT_ASSOCIATIVE },
	['<'] = { prec = 5, assoc = LEFT_ASSOCIATIVE },
	['>'] = { prec = 5, assoc = LEFT_ASSOCIATIVE },
	['..'] = { prec = 10, assoc = LEFT_ASSOCIATIVE },
	['+'] = { prec = 11, assoc = LEFT_ASSOCIATIVE },
	['-'] = { prec = 11, assoc = LEFT_ASSOCIATIVE },
	['*'] = { prec = 12, assoc = LEFT_ASSOCIATIVE },
	['/'] = { prec = 12, assoc = LEFT_ASSOCIATIVE },
	['//'] = { prec = 12, assoc = LEFT_ASSOCIATIVE },
	['%'] = { prec = 12, assoc = LEFT_ASSOCIATIVE },
	['^'] = { prec = 14, assoc = RIGHT_ASSOCIATIVE },
}

for token, op in pairs(BITOPS) {
	BINOPS[token] = op
}

for token, op in pairs(BINOPS) {
	op.token = token
}

module BINOP_ASSIGNMENT_TOKENS = {
	['||'] = true,
	['&&'] = true,
	['..'] = true,
	['+'] = true,
	['-'] = true,
	['*'] = true,
	['/'] = true,
	['//'] = true,
	['%'] = true,
	['^'] = true,
	['|'] = true,
	['~'] = true,
	['&'] = true,
	['<<'] = true,
	['>>'] = true,
}

-- -----------------------------------------------------------------------------
-- Lookup Tables
-- -----------------------------------------------------------------------------

module SURROUND_ENDS = {
	['('] = ')',
	['['] = ']',
	['{'] = '}',
}

module SYMBOLS = {
	['->'] = true,
	['=>'] = true,
	['...'] = true,
	['::'] = true,
}

for token, op in pairs(BINOPS) {
	if #token > 1 {
		SYMBOLS[token] = true
  }
}

-- Valid escape characters for 5.1+
module STANDARD_ESCAPE_CHARS = {
	a = true,
	b = true,
	f = true,
	n = true,
	r = true,
	t = true,
	v = true,
	['\\'] = true,
	['"'] = true,
	["'"] = true,
	['\n'] = true,
}

module DIGIT = {}
module HEX = {}
module WORD_HEAD = { ['_'] = true }
module WORD_BODY = { ['_'] = true }

for byte = string.byte('0'), string.byte('9') {
	local char = string.char(byte)
	DIGIT[char] = true
	HEX[char] = true
	WORD_BODY[char] = true
}

for byte = string.byte('A'), string.byte('F') {
	local char = string.char(byte)
	HEX[char] = true
	WORD_HEAD[char] = true
	WORD_BODY[char] = true
}

for byte = string.byte('G'), string.byte('Z') {
	local char = string.char(byte)
	WORD_HEAD[char] = true
	WORD_BODY[char] = true
}

for byte = string.byte('a'), string.byte('f') {
	local char = string.char(byte)
	HEX[char] = true
	WORD_HEAD[char] = true
	WORD_BODY[char] = true
}

for byte = string.byte('g'), string.byte('z') {
	local char = string.char(byte)
	WORD_HEAD[char] = true
	WORD_BODY[char] = true
}

-- -----------------------------------------------------------------------------
-- Token Types
-- -----------------------------------------------------------------------------

module TOKEN_TYPES = {
  SHEBANG = 1,
  SYMBOL = 2,
  WORD = 3,
  NUMBER = 4,
  SINGLE_QUOTE_STRING = 5,
  DOUBLE_QUOTE_STRING = 6,
  STRING_CONTENT = 7,
  INTERPOLATION = 8,
}
