-- This module contains higher level functions for use either via API or
-- internally (mostly in the CLI).

local compile = require('erde.compile')
local config = require('erde.config')
local { PATH_SEPARATOR, VALID_LUA_TARGETS } = require('erde.constants')
local { io, string } = require('erde.stdlib')
local { echo, get_source_summary } = require('erde.utils')

local loadlua = loadstring || load
local unpack = table.unpack || unpack
local native_traceback = debug.traceback

-- https://www.lua.org/manual/5.1/manual.html#pdf-package.loaders
-- https://www.lua.org/manual/5.2/manual.html#pdf-package.searchers
local searchers = package.loaders || package.searchers

local erde_source_cache = {}
local erde_source_id_counter = 1

-- -----------------------------------------------------------------------------
-- Debug
-- -----------------------------------------------------------------------------

module function rewrite(message) {
  -- Only rewrite strings! Other thrown values (including nil) do not get source
  -- and line number information added.
  if type(message) != 'string' {
    return message
  }

  for erde_source_id, chunkname, compiled_line in message:gmatch('%[string "erde::(%d+)::([^\n]+)"]:(%d+)') {
    local match = "%[string \"erde::{ erde_source_id }::{ chunkname }\"]:{ compiled_line }"

    local cache = erde_source_cache[tonumber(erde_source_id)] || {}

    -- If we have don't have a source map for erde code, we need to indicate that
    -- the error line is for the generated Lua.
    local source_map = cache.source_map || {}
    local source_line = source_map[tonumber(compiled_line)] || "(compiled:{ compiled_line })"

    message = cache.has_alias
      && message:gsub(match, chunkname .. ':' .. source_line)
      || message:gsub(match, "[string \"{ chunkname }\"]:{ source_line }")
  }

  -- When compiling, we translate words that are keywords in Lua but not in
  -- Erde. When reporting errors, we need to transform them back.
  message = message:gsub('__ERDE_SUBSTITUTE_([a-zA-Z]+)__', '%1')

  return message
}

module function traceback(arg1, arg2, arg3) {
  local stacktrace, level

  -- Follows native_traceback behavior for determining args.
  if type(arg1) == 'thread' {
    level = arg3 || 1
    -- Add an extra level to account for this traceback function itself!
    stacktrace = native_traceback(arg1, arg2, level + 1)
  } else {
    level = arg2 || 1
    -- Add an extra level to account for this traceback function itself!
    stacktrace = native_traceback(arg1, level + 1)
  }

  if type(stacktrace) != 'string' {
    return stacktrace
  }

  if level > -1 && config.is_cli_runtime {
    -- Remove following from stack trace caused by the cli:
    --
    -- [C]: in function <erde/cli/run.lua:xxx>
    -- [C]: in function 'xpcall'
    -- erde/cli/run.lua:xxx: in function 'run'
    -- erde/cli/init.lua:xxx: in main chunk
    --
    -- Note, we do not remove the very last line of the stack, this is the C
    -- entry point of the Lua VM.
    local stack = string.split(stacktrace, '\n')
    local stacklen = #stack
    for i = 1, 4 { table.remove(stack, stacklen - i) }
    stacktrace = table.concat(stack, '\n')
  }

  -- Remove any lines from `__erde_internal_load_source__` calls.
  -- See `__erde_internal_load_source__` for more details.
  stacktrace = stacktrace:gsub(table.concat({
    '[^\n]*\n',
    '[^\n]*__erde_internal_load_source__[^\n]*\n',
    '[^\n]*\n',
  }), '')

  return rewrite(stacktrace)
}

-- -----------------------------------------------------------------------------
-- Source Loaders
-- -----------------------------------------------------------------------------

-- Load a chunk of Erde code. This caches the generated source map
-- (see `erde_source_cache`) so we can fetch them later during error rewrites.
--
-- The alias is _not_ used as the chunkname in the underlying Lua `load`
-- call. Instead, a unique ID is generated and inserted instead. During error
-- rewrites, this ID will be extracted and replaced with the cached alias.
--
-- This function is also given a unique function name so that it is reliably
-- searchable in stacktraces. During stracetrace rewrites (see `traceback`), the
-- presence of this name dictates which lines we need to remove. Otherwise, the
-- resulting stacktraces will include function calls from this file, which will
-- be quite confusing and noisy for the end user.
--
-- IMPORTANT: THIS FUNCTION MUST NOT BE TAIL CALLED NOR DIRECTLY CALLED BY THE
-- USER AND IS ASSUMED TO BE CALLED AT THE TOP LEVEL OF LOADING ERDE SOURCE CODE.
--
-- Although we use a unique name here to find it in stacktraces, the actual
-- rewriting is much trickier. Because Lua will automatically collapse tail
-- calls in stacktraces, its hard to know how many lines of internal code
-- _before_ the call to `__erde_internal_load_source__` we need to remove.
--
-- Furthermore, finding the name of the function call is also nontrivial and
-- will actually get lost if this is directly called by the user, so it must
-- have at least one function call before it (even the Lua docs seem to mention
-- this in `debug.getinfo`, see https://www.lua.org/pil/23.1.html).
--
-- Thus, for consistency we always assume that this is never tail called and
-- it is called at the top level of loading erde source code, which ensures that
-- we always have the following 3 lines to remove:
--
-- 1. The `xpcall` in `__erde_internal_load_source__`
-- 2. The call to `__erde_internal_load_source__` itself
-- 3. The call that invoked `__erde_internal_load_source__`
module function __erde_internal_load_source__(source, options = {}) {
  local chunkname = table.concat({
    'erde',
    erde_source_id_counter,
    options.alias || get_source_summary(source),
  }, '::')

  -- No xpcall here, we want the traceback to start from this stack!
  local compiled, source_map = compile(source, {
    alias = options.alias,
    lua_target = options.lua_target,
    bitlib = options.bitlib,
  })

  -- Remove the shebang! Lua's `load` function cannot handle shebangs.
  compiled = compiled:gsub('^#![^\n]+', '')

  local loader, load_error = loadlua(compiled, chunkname)

  if load_error != nil {
    error(table.concat({
      'Failed to load compiled code:',
      tostring(load_error),
      '',
      'This is an internal error that should never happen.',
      'Please report this at: https://github.com/erde-lang/erde/issues',
      '',
      'erde',
      '----',
      source,
      '',
      'lua',
      '---',
      compiled,
    }, '\n'))
  }

  erde_source_cache[erde_source_id_counter] = { has_alias = options.alias != nil }

  if !config.disable_source_maps && !options.disable_source_maps {
    -- Cache source maps. Allow user to specify whether to disallow this, as the
    -- source map tables can be potentially large.
    erde_source_cache[erde_source_id_counter].source_map = source_map
  }

  erde_source_id_counter += 1

  return loader()
}

-- IMPORTANT: THIS IS AN ERDE SOURCE LOADER AND MUST ADHERE TO THE USAGE SPEC OF
-- `__erde_internal_load_source__`!
module function run(source, options) {
  return echo(__erde_internal_load_source__(source, options))
}

-- -----------------------------------------------------------------------------
-- Package Loader
-- -----------------------------------------------------------------------------

local function erde_searcher(module_name) {
  local module_path = module_name:gsub('%.', PATH_SEPARATOR)

  for path in package.path:gmatch('[^;]+') {
    local fullpath = path:gsub('%.lua$', '.erde'):gsub('?', module_path)

    if io.exists(fullpath) {
      -- IMPORTANT: THIS IS AN ERDE SOURCE LOADER AND MUST ADHERE TO THE USAGE SPEC OF
      -- `__erde_internal_load_source__`!
      return () -> {
        local source = io.readfile(fullpath)
        local result = { __erde_internal_load_source__(source, { alias = fullpath }) }
        return unpack(result)
      }
    }
  }
}

module function load(arg1, arg2) {
  local new_lua_target, options = nil, {}

  if type(arg1) == 'string' {
    new_lua_target = arg1
  }

  if type(arg1) == 'table' {
    options = arg1
  } elseif type(arg2) == 'table' {
    options = arg2
  }

  config.bitlib = options.bitlib
  config.disable_source_maps = options.disable_source_maps

  -- Always set `debug.traceback`, in case this is called multiple times
  -- with different arguments. By default we override Lua's native traceback
  -- with our own to rewrite Erde paths.
  debug.traceback = options.keep_traceback == true && native_traceback || traceback

  if new_lua_target != nil {
    if VALID_LUA_TARGETS[new_lua_target] {
      config.lua_target = new_lua_target
    } else {
      error(table.concat({
        "Invalid Lua target: { new_lua_target }",
        "Must be one of: { table.concat(VALID_LUA_TARGETS, ', ') }",
      }, '\n'))
    }
  } elseif jit != nil {
    config.lua_target = 'jit'
  } else {
    new_lua_target = _VERSION:match('Lua (%d%.%d)')
    if VALID_LUA_TARGETS[new_lua_target] {
      config.lua_target = new_lua_target
    } else {
      error("Unsupported Lua version: { _VERSION }")
    }
  }

  for _, searcher in ipairs(searchers) {
    if searcher == erde_searcher {
      return
    }
  }

  -- We need to place the searcher before the `.lua` searcher to prioritize Erde
  -- modules over Lua modules. If the user has compiled an Erde project before
  -- but the compiled files are out of date, we need to avoid loading the
  -- outdated modules.
  table.insert(searchers, 2, erde_searcher)
}

module function unload() {
  -- Restore Lua's native traceback
  debug.traceback = native_traceback

  for i, searcher in ipairs(searchers) {
    if searcher == erde_searcher {
      table.remove(searchers, i)
      return
    }
  }
}
