-- Multiline Comments

--- this is an inline comment ---
---
this is a
multiline comment---

local x

-- Params

local p1 = () -> {}
local p2 = () => {}

local p3 = x -> {}
local p4 = { :x = y } -> {}
local p5 = ({ :x = y }, z) -> {}

local p6 = (x = 1) -> {}
local p7 = (x, y = 1, z = 4) -> {}

local p8 = (...) -> {}
local p9 = (x, ...) -> {}
local p10 = (...x) -> {}

local p11 = (x, y = 3, z = 2, ...test) => {}

local p12 = (
  x,
  y = 3,
  z = 2,
  ...test,
) => {}

-- Function Body

local b1 = () -> {
  local x = 42
  return x
}

local b2 = () -> { local x = 'hello' }
local b3 = () -> ({
  x: 'hello',
  y: 'bye',
})

-- Function Call

-- myfunc()
-- (() -> {})()
-- a.b[1]()
-- a.b[3].c(x, 4 + 5)
-- a.b[3]:c()

-- Returns

local x = () -> {
  return
}

local x = () -> {
  return a
}

local x = () -> {
  return a, b, c
}

local x = () -> {
  return (
    a,
    b,
    c,
  )
}

-- If Else

if true {
  local x = 4
} elseif false {
  local x = 5
} else {
  local x = 10
} 

-- Numeric For

for i = 1, 3, 4 {
  local x
}

for i = 1, 3 {
  local x
}

-- Generic For

for k, v in ipairs() {
  local x
}

-- While Loop

while x {
  local x = 4
}

-- Repeat Until

repeat {
  local x = 2
} until (x)

-- Do Block

do {
  local x = 4
}

-- Piping

-- local derivedcollection = mycollection
--   >> map(value -> value + 2)
--   >> reduce((reduction, test) -> {
--   })
--   >> filter(value -> value + 2)

-- Numbers

local a1 = 0x450
local a2 = 43
local a3 = 43.4
local a4 = 10.2E8
local a5 = .2e10

-- Strings

local b1 = 'hello world'
local b2 = "goodbye world"
local b3 = `hello world`
local b4 = `
  hello
  world
`
local b5 = `hello { b2 } { wo382 }`

-- Escape Chars

local c1 = 'hello\nworld'
local c2 = `a\`b\{c\}d`

-- Long String Escape Id

local d1 = `[[hello]]`
local d2 = `[=[hello]=]`
local d3 = `[==[hello]==]`

-- Declaration

local y = { }
local y = {
  ['hello' .. 'world']: true,
  ['hello']: true,
  `{hello}`: true,
  test: 'hi',
  :test,
  'hello world',
}

-- Indexing

local x = y.a.b[3].c
local x = ({ x: 'hi' }).x

local x = y.b?.a
local x = (y.b?.a) ?? 4

y.b?.a = 4
y?.b.a = 4

-- Destructure

local { a, b } = y
local { :a, :b } = y
local { :a { :a1, :a2 } } = y
local { :a { :a1, :a2 } = {}, :b } = y

-- Destructure Params

local test = ({ :x = y }) -> {
  return true
}

local test2 = ({ :x = y } = z, ...test) => {}
