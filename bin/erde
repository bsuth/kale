#!/usr/bin/env luajit

local argparse = require('argparse')
local lfs = require('lfs')
local erde = require('erde')

local CWD = lfs.currentdir()
local PATH_SEPARATOR = package.config:sub(1, 1) 

-- A header comment we inject into compiled code in order to track which files
-- have been generated by the cli (and thus allows us to also clean them later).
--
-- IMPORTANT: Keep this consistent with `erde.constants`!
local COMPILED_HEADER_COMMENT = '-- __ERDE_COMPILED__'

-- -----------------------------------------------------------------------------
-- Helpers
-- -----------------------------------------------------------------------------

local function pathJoin(...)
  return table.concat({ ... }, PATH_SEPARATOR)
    :gsub(PATH_SEPARATOR .. '+', PATH_SEPARATOR)
end

local function checkHeader(file)
  local head1, head2 = file:read('*l'), file:read('*l')
  return (head1 and head1:find(COMPILED_HEADER_COMMENT)) 
    or (head2 and head2:find(COMPILED_HEADER_COMMENT))
end

local function traverseDir(root, callback)
  for fileName in lfs.dir(root) do
    if fileName ~= '.' and fileName ~= '..' then
      local filePath = pathJoin(root, fileName)
      local attributes = lfs.attributes(filePath)

      if attributes ~= nil then
        if attributes.mode == 'directory' then
          traverseDir(filePath, callback)
        elseif attributes.mode == 'file' then
          callback(filePath)
        end
      end
    end
  end
end

local function traverseErdeFiles(root, callback)
  traverseDir(root, function(filePath)
    if filePath:match('%.erde$') then
      callback(filePath)
    end
  end)
end

local function traverseLuaFiles(root, callback)
  traverseDir(root, function(filePath)
    if filePath:match('%.lua$') then
      callback(filePath)
    end
  end)
end

-- -----------------------------------------------------------------------------
-- Compile
-- -----------------------------------------------------------------------------

local function compileFile(srcFilePath, outDir)
  local destFilePath = srcFilePath:gsub('%.erde$', '.lua')

  if outDir then
    destFilePath = destFilePath:gsub(CWD, outDir)
  end

  local readOnlyDestFile = io.open(destFilePath, 'r')

  if readOnlyDestFile ~= nil then
    -- Safety check, do not overwrite files we did not generate!

    if not checkHeader(readOnlyDestFile) then
      error('Cannot write to ' .. destFilePath .. ': File already exists')
    end

    readOnlyDestFile:close()
  end

  local srcFile = io.open(srcFilePath, 'r')
  local compiled = erde.compile(srcFile:read('*a'))
  srcFile:close()

  local destFile = io.open(destFilePath, 'w')
  destFile:write(compiled)

  print(
    srcFilePath:gsub(CWD .. PATH_SEPARATOR, '')
    .. ' -> '
    .. destFilePath:gsub(CWD .. PATH_SEPARATOR, '')
  )
end

local function compile(args)
  local files = #args.arguments > 0 and args.arguments or {'.'}

  for i, filePath in ipairs(files) do
    local attributes = lfs.attributes(filePath)
    if attributes.mode == 'file' then
      compileFile(filePath, outDir)
    elseif attributes.mode == 'directory' then
      traverseErdeFiles(filePath, function(compileFilePath)
        compileFile(compileFilePath, outDir)
      end)
    end
  end
end

-- -----------------------------------------------------------------------------
-- Clean
-- -----------------------------------------------------------------------------

local function cleanFile(filePath)
  local file = io.open(filePath, 'r')

  if file == nil then
    return
  end

  if checkHeader(file) then
    os.remove(filePath)
  end

  file:close()
end

local function clean(args)
  local files = #args.arguments > 0 and args.arguments or {'.'}

  for i, filePath in ipairs(files) do
    local attributes = lfs.attributes(filePath)
    if attributes.mode == 'file' then
      cleanFile(filePath)
    elseif attributes.mode == 'directory' then
      traverseLuaFiles(filePath, cleanFile)
    end
  end
end

-- -----------------------------------------------------------------------------
-- CLI
-- -----------------------------------------------------------------------------

local cli = argparse('erde')
cli:add_complete()
cli:argument('arguments', 'Operation specific arguments'):args('*')

cli:mutex(
  cli:flag('-v --version', 'Print version')
)

cli:mutex(
  cli:flag('-X --clean', 'Clean compiled files')
)

cli:mutex(
  cli:flag('-C --compile', 'Clean compiled files'),
  cli:flag('-t --target', 'Lua target'),
  cli:option('-o --outDir')
)

local args = cli:parse()
local numArguments = #args.arguments

if args.version then
  print('0.2-1')
elseif args.compile then
  compile(args)
elseif args.clean then
  clean(args)
elseif numArguments == 1 then
  local modulePath = pathJoin(CWD, args.arguments[1])
  local moduleFile = io.open(modulePath)

  if moduleFile == nil then
    return 'File does not exist: ' .. args.arguments[1]
  end

  local moduleContents = moduleFile:read('*a')
  moduleFile:close()
  return erde.run(moduleContents)
else
  print('REPL not yet supported.')
end
