#!/usr/bin/env luajit

local argparse = require('argparse')
local lfs = require('lfs')
local erde = require('erde')
require('erde.loader')

local CWD = lfs.currentdir()
local PATH_SEPARATOR = _G.package.config:sub(1, 1) 

-- Keep this consistent with erde.constants!
local COMPILED_HEADER_COMMENT = '-- __ERDE_COMPILED__'

-- -----------------------------------------------------------------------------
-- Helpers
-- -----------------------------------------------------------------------------

local function pathJoin(...)
  return table.concat({ ... }, PATH_SEPARATOR)
    :gsub(PATH_SEPARATOR .. '+', PATH_SEPARATOR)
end

local function checkHeader(file)
  local head1, head2 = file:read('*l'), file:read('*l')
  return (head1 and head1:find(COMPILED_HEADER_COMMENT)) 
    or (head2 and head2:find(COMPILED_HEADER_COMMENT))
end

local function traverseDir(root, callback)
  for fileName in lfs.dir(root) do
    if fileName ~= '.' and fileName ~= '..' then
      local filePath = pathJoin(root, fileName)
      local attributes = lfs.attributes(filePath)

      if attributes ~= nil then
        if attributes.mode == 'directory' then
          traverseDir(filePath, callback)
        elseif attributes.mode == 'file' then
          callback(filePath)
        end
      end
    end
  end
end

local function traverseErdeFiles(root, callback)
  traverseDir(root, function(filePath)
    if filePath:match('%.erde$') then
      callback(filePath)
    end
  end)
end

local function traverseLuaFiles(root, callback)
  traverseDir(root, function(filePath)
    if filePath:match('%.lua$') then
      callback(filePath)
    end
  end)
end

-- -----------------------------------------------------------------------------
-- CLI
-- -----------------------------------------------------------------------------

local cli = argparse('erde')
cli:require_command(false)
cli:add_complete()

cli:flag('-v --version', 'Print version and exit.')
cli:option('-l --luaVersion')

local args -- Forward declare

-- -----------------------------------------------------------------------------
-- Run
-- -----------------------------------------------------------------------------

local runCmd = cli:command('run')
runCmd:argument('script', 'Script to run'):args('1')

local function run()
  -- TODO: error handling

  require(args.script:gsub('%.erde$', ''))
end

-- -----------------------------------------------------------------------------
-- Compile
-- -----------------------------------------------------------------------------

local compileCmd = cli:command('compile')
compileCmd:argument('files', 'Files to compile.'):args('*')
compileCmd:option('--outDir')

local function compileFile(srcFilePath)
  local destFilePath = srcFilePath:gsub('%.erde$', '.lua')

  if args.outDir then
    destFilePath = destFilePath:gsub(CWD, args.outDir)
  end

  local readOnlyDestFile = io.open(destFilePath, 'r')

  if readOnlyDestFile ~= nil then
    -- Safety check, do not overwrite files we did not generate!

    if not checkHeader(readOnlyDestFile) then
      error('Cannot write to ' .. destFilePath .. ': File already exists')
    end

    readOnlyDestFile:close()
  end

  local srcFile = io.open(srcFilePath, 'r')
  local compiled = erde.compile(srcFile:read('*a'))
  srcFile:close()

  local destFile = io.open(destFilePath, 'w')
  destFile:write(compiled)

  print(
    srcFilePath:gsub(CWD .. PATH_SEPARATOR, '')
    .. ' -> '
    .. destFilePath:gsub(CWD .. PATH_SEPARATOR, '')
  )
end

local function compile()
  if #args.files == 0 then
    traverseErdeFiles('.', compileFile)
  else
    for i, fileName in ipairs(args.files) do
      compileFile(pathJoin(CWD, fileName))
    end
  end
end

-- -----------------------------------------------------------------------------
-- Clean
-- -----------------------------------------------------------------------------

local cleanCmd = cli:command('clean')
cleanCmd:argument('dirs', 'Directories to clean.'):args('*')

local function cleanFile(filePath)
  local file = io.open(filePath, 'r')

  if file == nil then
    return
  end

  if checkHeader(file) then
    os.remove(filePath)
  end

  file:close()
end

local function clean()
  if #args.dirs == 0 then
    traverseLuaFiles('.', cleanFile)
  else
    for i, dir in ipairs(args.dirs) do
      traverseLuaFiles(dir, cleanFile)
    end
  end
end

-- -----------------------------------------------------------------------------
-- Main
-- -----------------------------------------------------------------------------

args = cli:parse()

if args.version then
  print('0.2-1')
elseif args.run then
  run()
elseif args.compile then
  compile()
elseif args.clean then
  clean()
else
  print('REPL not yet supported.')
end
