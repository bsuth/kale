#!/usr/bin/env lua

local argparse = require('argparse')
local lfs = require('lfs')
local erde = require('erde')

local COMPILE_HEADER_TAG = 'ERDE_META'
local COMPILE_HEADER = '-- ' .. COMPILE_HEADER_TAG .. '\n'

-- -----------------------------------------------------------------------------
-- Path Helpers
-- -----------------------------------------------------------------------------

local path = { sep = _G.package.config:sub(1, 1) }

function path.join(...)
  return table.concat({ ... }, path.sep):gsub(path.sep .. '+', path.sep)
end

local fs = {}

function fs.exists(filePath)
  local file = io.open(filePath, 'r')

  if file ~= nil then
    file:close()
    return true
  end

  return false
end

-- -----------------------------------------------------------------------------
-- Helpers
-- -----------------------------------------------------------------------------

local function contains(t, element)
  for i, value in ipairs(t) do
    if value == element then
      return true
    end
  end

  return false
end

-- TODO: make this cross platform + error handling?
-- 2) Stopping point (dont use $HOME?)
local function getPackage()
  local home = os.getenv('HOME')
  local restoreDir = lfs.currentdir()

  local packageRoot = restoreDir
  local packageFile = io.open(path.join(packageRoot, 'package.erde'), 'r')
  while packageFile == nil and packageRoot:find(home) do
    lfs.chdir('..')
    packageRoot = lfs.currentdir()
    packageFile = io.open(path.join(packageRoot, 'package.erde'), 'r')
  end

  lfs.chdir(restoreDir)

  if packageFile == nil then
    return {}, nil
  end

  local packageContents = packageFile:read('*a')
  packageFile:close()
  local parsedPackage = erde.parse(packageContents)
  local compiledPackage = erde.compile(parsedPackage)

  local loadedPackage = (loadstring or load)(compiledPackage)
  if not loadedPackage then
    return {}, nil
  end

  return loadedPackage(), packageRoot
end

local function traverseDir(root, excludeDirs, callback)
  for fileName in lfs.dir(root) do
    if fileName ~= '.' and fileName ~= '..' and fileName ~= 'package.erde' then
      local filePath = path.join(root, fileName)
      local attributes = lfs.attributes(filePath)

      if attributes ~= nil then
        if attributes.mode == 'directory' then
          if not contains(excludeDirs, filePath) then
            traverseDir(filePath, excludeDirs, callback)
          end
        elseif attributes.mode == 'file' then
          callback(filePath)
        end
      end
    end
  end
end

local function traverseErdeFiles(root, excludeDirs, callback)
  traverseDir(root, excludeDirs, function(filePath)
    if filePath:match('%.erde$') then
      callback(filePath)
    end
  end)
end

local function traverseLuaFiles(root, excludeDirs, callback)
  traverseDir(root, excludeDirs, function(filePath)
    if filePath:match('%.lua$') then
      callback(filePath)
    end
  end)
end

-- -----------------------------------------------------------------------------
-- CLI
-- -----------------------------------------------------------------------------

local cli = argparse('erde')
cli:require_command(false)
cli:add_complete()

-- The current Erde version.
cli:flag('-v --version', 'Print version and exit.')

-- The Lua version to use.
cli:option('-l --luaVersion')

-- The root directory. All paths (such as those given in --include / --exclude)
-- are assumed to be relative to the root.
cli:option('--root')

-- Directories to traverse when searching for .erde files.
cli:option('--include')

-- Directories to exclude when searching for .erde files.
cli:option('--exclude')

local run = cli:command('run')
local format = cli:command('format')

-- -----------------------------------------------------------------------------
-- Compile
-- -----------------------------------------------------------------------------

local compileCmd = cli:command('compile')

-- Allow specifying files on command line. If this is present, includeDirs will
-- NOT default to root.
compileCmd:argument('files', 'Files to compile.'):args('*')

-- The directory to write compiled files to.
compileCmd:option('--outDir')

local function compileFile(srcFilePath)
  local srcFile = io.open(srcFilePath, 'r')
  local moduleContents = srcFile:read('*a')
  srcFile:close()

  local parsedModule = erde.parse(moduleContents)
  local compiledModule = COMPILE_HEADER .. erde.compile(parsedModule)

  local destFilePath = srcFilePath:gsub('.erde$', '.lua')
  if outDir ~= nil then
    -- Collapse file structure if there is only 1 include dir
    if #includeDirs == 1 then
      destFilePath = destFilePath:gsub(
        includeDirs[1],
        outDir
      )
    else
      destFilePath = destFilePath:gsub(root, outDir)
    end
  end

  local destFile = io.open(destFilePath, 'w')
  destFile:write(compiledModule)

  print(
    srcFilePath:gsub(root .. path.sep, '')
    .. ' -> '
    .. destFilePath:gsub(root .. path.sep, '')
  )
end

local function processCompileCmd()
  for i, fileName in ipairs(args.files) do
    if fileName:match('%.erde$') then
      compileFile(path.join(root, fileName))
    end
  end

  for i, includeDir in ipairs(includeDirs) do
    traverseErdeFiles(includeDir, excludeDirs, compileFile)
  end
end

-- -----------------------------------------------------------------------------
-- Clean
-- -----------------------------------------------------------------------------

local cleanCmd = cli:command('clean')

-- Allow specifying files on command line. If this is present, includeDirs will
-- NOT default to root.
cleanCmd:argument('dirs', 'Directories to clean.'):args('*')

-- Clean all Erde generated files from the root. By default only files that are
-- generated by the current configuration are cleaned.
cleanCmd:flag('--hard')

local function cleanFile(filePath)
  local file = io.open(filePath, 'r')
  local fileHeader = file:read('*l')
  file:close()
  
  if fileHeader and fileHeader:find(COMPILE_HEADER_TAG) then
    os.remove(filePath)
  end
end

local function processCleanCmd()
  if args.hard then
    traverseLuaFiles(root, excludeDirs, cleanFile)
  end

  if #args.dirs > 0 then
    for i, cleanDir in ipairs(args.dirs) do
      traverseLuaFiles(cleanDir, excludeDirs, cleanFile)
    end
  else
    for i, includeDir in ipairs(includeDirs) do
      traverseLuaFiles(includeDir, excludeDirs, cleanFile)
    end

    if outDir ~= nil and fs.exists(outDir) then
      traverseLuaFiles(outDir, {}, cleanFile)
      os.remove(outDir)
    end
  end
end

-- -----------------------------------------------------------------------------
-- Main
-- -----------------------------------------------------------------------------

args = cli:parse()
cwd = lfs.currentdir()
package, packageRoot = getPackage()
root = args.root or packageRoot or cwd

outDir = args.outDir or package.outDir
outDir = outDir and path.join(root, outDir) or nil

includeDirs = {}
excludeDirs = {}
if package then
  if type(package.include) == 'table' then
    for i, includeDir in ipairs(package.include) do
      includeDirs[i] = path.join(root, includeDir)
    end
  end

  if type(package.exclude) == 'table' then
    for i, excludeDir in ipairs(package.exclude) do
      excludeDirs[i] = path.join(root, excludeDir)
    end
  end
end

if args.version then
  print('v0.1.0')
elseif args.compile then
  processCompileCmd()
elseif args.run then
  print('TODO')
elseif args.format then
  print('TODO')
elseif args.clean then
  processCleanCmd()
else
  -- repl
  print('TODO')
end
