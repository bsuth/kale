local unit = require('erde.parser.unit')

spec('valid short string', function()
  assert.are.equal('"hello"', unit.string('"hello"'))
  assert.are.equal("'hello'", unit.string("'hello'"))
  assert.are.equal("'hello\\nworld'", unit.string("'hello\\nworld'"))
  assert.are.equal("'\\\\'", unit.string("'\\\\'"))
end)

spec('invalid short string', function()
  assert.has_error(function()
    unit.string('hello"')
  end)
  assert.has_error(function()
    unit.string('"hello')
  end)
  assert.has_error(function()
    unit.string('"hello\nworld"')
  end)
  assert.has_error(function()
    unit.string("hello'")
  end)
  assert.has_error(function()
    unit.string("'hello")
  end)
  assert.has_error(function()
    unit.string("'hello\nworld'")
  end)
end)

spec('valid long string', function()
  assert.has_subtable({ 'hello world' }, unit.string('`hello world`'))
  assert.has_subtable({ 'hello\nworld' }, unit.string('`hello\nworld`'))
  assert.has_subtable({ 'a{bc}d' }, unit.string('`a\\{bc}d`'))
  assert.has_subtable({ 'a`b' }, unit.string('`a\\`b`'))
  assert.has_subtable({ 'hello ', { value = '3' } }, unit.string('`hello {3}`'))
end)

spec('invalid long string', function()
  assert.has_error(function()
    unit.string('`hello world')
  end)
  assert.has_error(function()
    unit.string('`hello world {2`')
  end)
end)

spec('invalid string', function()
  assert.has_error(function()
    unit.string('[[hello world]]')
  end)
end)
